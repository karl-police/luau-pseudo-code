#pragma once

#include "../Luau/Bytecode.h"

namespace PseudoUtils {
    inline const char* getOpCodeName(LuauOpcode op) {
        switch (op) {
        case LOP_NOP:
            return "NOP";
        case LOP_BREAK:
            return "BREAK";
        case LOP_LOADNIL:
            return "LOADNIL";
        case LOP_LOADB:
            return "LOADB";
        case LOP_LOADN:
            return "LOADN";
        case LOP_LOADK:
            return "LOADK";
        case LOP_MOVE:
            return "MOVE";
        case LOP_GETGLOBAL:
            return "GETGLOBAL";
        case LOP_SETGLOBAL:
            return "SETGLOBAL";
        case LOP_GETUPVAL:
            return "GETUPVAL";
        case LOP_SETUPVAL:
            return "SETUPVAL";
        case LOP_CLOSEUPVALS:
            return "CLOSEUPVALS";
        case LOP_GETIMPORT:
            return "GETIMPORT";
        case LOP_GETTABLE:
            return "GETTABLE";
        case LOP_SETTABLE:
            return "SETTABLE";
        case LOP_GETTABLEKS:
            return "GETTABLEKS";
        case LOP_SETTABLEKS:
            return "SETTABLEKS";
        case LOP_GETTABLEN:
            return "GETTABLEN";
        case LOP_SETTABLEN:
            return "SETTABLEN";
        case LOP_NEWCLOSURE:
            return "NEWCLOSURE";
        case LOP_NAMECALL:
            return "NAMECALL";
        case LOP_CALL:
            return "CALL";
        case LOP_RETURN:
            return "RETURN";
        case LOP_JUMP:
            return "JUMP";
        case LOP_JUMPBACK:
            return "JUMPBACK";
        case LOP_JUMPIF:
            return "JUMPIF";
        case LOP_JUMPIFNOT:
            return "JUMPIFNOT";
        case LOP_JUMPIFEQ:
            return "JUMPIFEQ";
        case LOP_JUMPIFLE:
            return "JUMPIFLE";
        case LOP_JUMPIFLT:
            return "JUMPIFLT";
        case LOP_JUMPIFNOTEQ:
            return "JUMPIFNOTEQ";
        case LOP_JUMPIFNOTLE:
            return "JUMPIFNOTLE";
        case LOP_JUMPIFNOTLT:
            return "JUMPIFNOTLT";
        case LOP_ADD:
            return "ADD";
        case LOP_SUB:
            return "SUB";
        case LOP_MUL:
            return "MUL";
        case LOP_DIV:
            return "DIV";
        case LOP_MOD:
            return "MOD";
        case LOP_POW:
            return "POW";
        case LOP_ADDK:
            return "ADDK";
        case LOP_SUBK:
            return "SUBK";
        case LOP_MULK:
            return "MULK";
        case LOP_DIVK:
            return "DIVK";
        case LOP_MODK:
            return "MODK";
        case LOP_POWK:
            return "POWK";
        case LOP_AND:
            return "AND";
        case LOP_OR:
            return "OR";
        case LOP_ANDK:
            return "ANDK";
        case LOP_ORK:
            return "ORK";
        case LOP_CONCAT:
            return "CONCAT";
        case LOP_NOT:
            return "NOT";
        case LOP_MINUS:
            return "MINUS";
        case LOP_LENGTH:
            return "LENGTH";
        case LOP_NEWTABLE:
            return "NEWTABLE";
        case LOP_DUPTABLE:
            return "DUPTABLE";
        case LOP_SETLIST:
            return "SETLIST";
        case LOP_FORNPREP:
            return "FORNPREP";
        case LOP_FORNLOOP:
            return "FORNLOOP";
        case LOP_FORGLOOP:
            return "FORGLOOP";
        case LOP_FORGPREP_INEXT:
            return "FORGPREP_INEXT";
        case LOP_DEP_FORGLOOP_INEXT:
            return "LOP_DEP_FORGLOOP_INEXT";
        case LOP_FORGPREP_NEXT:
            return "FORGPREP_NEXT";
        case LOP_NATIVECALL:
            return "NATIVECALL";
        case LOP_GETVARARGS:
            return "GETVARARGS";
        case LOP_DUPCLOSURE:
            return "DUPCLOSURE";
        case LOP_PREPVARARGS:
            return "PREPVARARGS";
        case LOP_LOADKX:
            return "LOADKX";
        case LOP_JUMPX:
            return "JUMPX";
        case LOP_FASTCALL:
            return "FASTCALL";
        case LOP_COVERAGE:
            return "COVERAGE";
        case LOP_CAPTURE:
            return "CAPTURE";
        case LOP_SUBRK:
            return "SUBRK";
        case LOP_DIVRK:
            return "DIVRK";
        case LOP_FASTCALL1:
            return "FASTCALL1";
        case LOP_FASTCALL2:
            return "FASTCALL2";
        case LOP_FASTCALL2K:
            return "FASTCALL2K";
        case LOP_FORGPREP:
            return "FORGPREP";
        case LOP_JUMPXEQKNIL:
            return "JUMPXEQKNIL";
        case LOP_JUMPXEQKB:
            return "JUMPXEQKB";
        case LOP_JUMPXEQKN:
            return "JUMPXEQKN";
        case LOP_JUMPXEQKS:
            return "JUMPXEQKS";
        case LOP_IDIV:
            return "IDIV";
        case LOP_IDIVK:
            return "IDIVK";
        case LOP__COUNT:
            return "LOP__COUNT";

        default:
            return "_PSEUDO_INVALID_";
        }
	}
}